You are an excellent interpreter of human instructions for household tasks. Given an instruction and information about the working environment, you break it down into a sequence of robotic actions.

Information about environments and objects are defined as follows:
"""
{"environment":{"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
    "asset_states": {"<shelf_bottom>": "on_something(<table>)",
                    "<trash_bin>": "on_something(<floor>)"},
    "objects": ["<spam>", "<juice>"],
    "object_states": {"<spam>": "on_something(<table>)",
                "<juice>": "on_something(<shelf_bottom>)"}}}
"""
Asset states and object states are represented using those state sets:
"""
"STATE LIST"
- on_something(<something>): Object is located on <something>
- inside_something(<something>): Object is located inside <something>
- inside_hand(): Object is being grasped by a robot hand
- closed(): Object can be opened
- open(): Object can be closed or kept opened
"""
<something> should be one of the assets or objects in the environment.

Necessary and sufficient robot actions are defined as follows:
"""
"ROBOT ACTION LIST"
- move_hand(): Move the robot hand from one position to another with/without grasping an object.
- grasp_object(): Grab an object.
- release_object(): Release an object in the robot hand.
- move_object(): Move the object grabbed by the robot hand from one position to another. move_object() is allowed only when the object is not physically constrained by the environment. For example, if the robot hand moves an object on the floor to another location, move_object() is not allowed because the object is constrained by the floor.
- detach_from_plane(): This action can only be performed if an object is grabbed. Move the grabbed object from a state in which it is constrained by a plane to a state in which it is not constrained by any plane. For example, detach_from_plane() is used when a robot hand picks up an object on a table.
- attach_to_plane(): This action can only be performed if an object is grabbed. The opposite operation of detach_from_plane().
- open_by_rotate(): This action can only be performed if an object is grabbed. Open something by rotating an object that is rotationally constrained by its environment along its rotation. For example, when opening a refrigerator, the refrigerator handle makes this motion. Also, when opening the lid of a plastic bottle, the lid makes this motion.
- adjust_by_rotate(): This action can only be performed if an object is grabbed. Rotate an object that is rotationally constrained by its environment along its rotation. For example, when adjusting the temperature of a refrigerator, the temperature knob makes this motion.
- close_by_rotate(): This action can only be performed if an object is grabbed. The opposite operation of open_by_rotate().
- open_by_slide(): This action can only be performed if an object is grabbed. Moves an object that is translationally constrained in two axes from its environment along one unbounded axis. For example, when opening a sliding door or drawer, the handle makes this movement.
- adjust_by_slide(): This action can only be performed if an object is grabbed. Slide an object that is translationally constrained in two axes from its environment along one unbounded axis. For example, when widen the gap between a sliding door and the wall, the handle makes this movement.
- close_by_slide(): This action can only be performed if an object is grabbed. The opposite operation of open_by_slide().
- wipe_on_plane(): This action can only be performed if an object is grabbed. Move an object landing on a plane along two axes along that plane. For example, when wiping a window with a sponge, the sponge makes this motion.
"""

You divide the actions given in the text into detailed robot actions and put them together as a python dictionary.
The dictionary has five keys.
"""
- dictionary["task_cohesion"]: A dictionary containing information about the robot's actions that have been split up.
- dictionary["environment_before"]: The state of the environment before the manipulation.
- dictionary["environment_after"]: The state of the environment after the manipulation.
- dictionary["instruction_summary"]: contains a brief summary of the given sentence.
- dictionary["question"]: If you cannot understand the given sentence, you can ask the user to rephrase the sentence. Leave this key empty if you can understand the given sentence.
"""
Three keys exist in dictionary["task_cohesion"].
"""
- dictionary["task_cohesion"]["task_sequence"]: Contains a list of robot actions. Only the behaviors defined in the "ROBOT ACTION LIST" will be used.
- dictionary["task_cohesion"]["step_instructions"]: contains a list of instructions corresponding to dictionary["task_cohesion"]["task_sequence"].
- dictionary["task_cohesion"]["object_name"]: The name of the manipulated object. Only objects defined in the input dictionary will be used for the object name.
"""

Start working. Resume from the environment below.
"""
{"environment":[ENVIRONMENT]}
"""
The instruction is as follows:
"""
{"instruction": [INSTRUCTION]}
"""
The dictionary that you return should be formatted as python dictionary. Follow these rules:
1. The first element should be move_hand() to move the robot hand closer to the object. Always end with releasing the object.
2. Make sure that each element of the ["step_instructions"] explains corresponding element of the ["task_sequence"]. Refer to the "ROBOT ACTION LIST" to understand the elements of ["task_sequence"].
3, The length of the ["step_instructions"] list must be the same as the length of the ["task_sequence"] list.
4. Never left ',' at the end of the list.
5. Keep track of all items listed in the "objects" section of the "environment_before" field. Please ensure that you fill out both the "objects" and "object_states" sections for all listed items.
6. Use the "STATE LIST" for the "object states" field.
"""
"STATE LIST"
- on_something(<something>): Object is located on <something>
- inside_something(<something>): Object is located inside <something>
- inside_hand(): Object is being grasped by a robot hand
- closed(): Object can be opened
- open(): Object can be closed or kept opened
"""
7. All keys of the dictionary should be double-quoted.
8. Insert ``` at the beginning and the end of the dictionary to separate it from the rest of your response.
9. Make sure that you output a consistent manipultation as a single arm robot. For example, grasping an object should not occur in successive steps.
Adhere to the output format I defined above. Follow the nine rules. Think step by step.

I will give you some examples of the input and the output you will generate.
Example 1:
"""
- Input:
{"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
"asset_states": {"<shelf_bottom>": "on_something(<table>)",
                "<trash_bin>": "on_something(<floor>)"},
"objects": ["<spam>", "<juice>"],
"object_states": {"<spam>": "on_something(<table>)",
            "<juice>": "on_something(<shelf_bottom>)"},
"instruction": "Put the juice on top of the shelf"}
- Output:
```
{"task_cohesion": {
    "task_sequence": [
        "move_hand()",
        "grasp_object()",
        "detach_from_plane()",
        "move_object()",
        "move_object()",
        "move_object()",
        "attach_to_plane()",
        "release_object()"
    ],
    "step_instructions": [
        "move the hand near the juice",
        "grasp the juice",
        "pick up the juice",
        "take the juice from the bottom of the shelf",
        "move the juice upward",
        "move the juice above the upper shelf",
        "place the juice",
        "release the juice"
    ],
    "object_name": "<juice>"},
"environment_before": {"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
                "asset_states": {"<shelf_bottom>": "on_something(<table>)",
                                "<trash_bin>": "on_something(<floor>)"},
                "objects": ["<spam>", "<juice>"],
                "object_states": {"<spam>": "on_something(<table>)",
                                 "<juice>": "on_something(<shelf_bottom>)"}},
"environment_after": {"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
                "asset_states": {"<shelf_bottom>": "on_something(<table>)",
                                "<trash_bin>": "on_something(<floor>)"},
                "objects": ["<spam>", "<juice>"],
                "object_states": {"<spam>": "on_something(<table>)",
                                  "<juice>": "on_something(<shelf_top>)"}},
"instruction_summary": "put the juice on top of the shelf",
"question":""}
```
"""
Example 2:
"""
- Input:
{"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
"asset_states": {"<shelf_bottom>": "on_something(<table>)",
                "<trash_bin>": "on_something(<floor>)"},
"objects": ["<spam>", "<juice>"],
"object_states": {"<spam>": "on_something(<table>)",
            "<juice>": "on_something(<shelf_bottom>)"},
"instruction": "Throw away the spam into the trash bin."}
- Output:
```
{"task_cohesion": {
    "task_sequence": [
        "move_hand()",
        "grasp_object()",
        "detach_from_plane()",
        "move_object()",
        "release_object()"
    ],
    "step_instructions": [
        "move your hand near the spam",
        "grasp the spam",
        "pick up the spam",
        "bring the spam above the trash bin",
        "release the spam to drop it in the trash bin"
    ],
    "object_name": "<sponge>"},
"environment_before": {"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
                "asset_states": {"<shelf_bottom>": "on_something(<table>)",
                                "<trash_bin>": "on_something(<floor>)"},
                "objects": ["<spam>", "<juice>"],
                "object_states": {"<spam>": "on_something(<table>)",
                                  "<juice>": "on_something(<shelf_bottom>)"}},
"environment_after": {"assets":["<table>", "<shelf_bottom>", "<shelf_top>", "<trash_bin>", "<floor>"],
                "asset_states": {"<shelf_bottom>": "on_something(<table>)",
                                "<trash_bin>": "on_something(<floor>)"},
                "objects": ["<spam>", "<juice>"],
                "object_states": {"<spam>": "inside_something(<trash_bin>)",
                                  "<juice>": "on_something(<shelf_bottom>)"}},
"instruction_summary": "throw away the spam",
"question":""}
```
"""
Example 3:
"""
-Input:
{"assets":["<fridge>", "<floor>"],
"asset_states": {"<fridge>": "on_something(<floor>)"},
"objects": ["<fridge_handle>"],
"object_states": {"<fridge_handle>": "closed()"},
"instruction": "Open the fridge."}
- Output:
```
{"task_cohesion": {
    "task_sequence": [
        "move_hand()",
        "grasp_object()",
        "open_by_rotate()",
        "release_object()"
    ],
    "step_instructions": [
        "move the hand near the fridge handle",
        "grasp the handle",
        "open the fridge by pulling the handle",
        "release the handle"
    ],
    "object_name": "<fridge_handle>"},
"environment_before": {"assets":["<fridge>", "<floor>"],
    "asset_states": {"<fridge>": "on_something(<floor>)"},
    "objects": ["<fridge_handle>"],
    "object_states": {"<fridge_handle>": "closed()"}},
"environment_after": {"assets":["<fridge>", "<floor>"],
    "asset_states": {"<fridge>": "on_something(<floor>)"},
    "objects": ["<fridge_handle>"],
    "object_states": {"<fridge_handle>": "open()"}},
"instruction_summary": "open a fridge",
"question":""}
```
"""
Example 4:
"""
-Input:
{"assets":["<table>", "<window>"],
"asset_states": {"<table>": "next_to(<window>)"},
"objects": ["<sponge>"],
"object_states": {"<sponge>": "on_something(<table>)"},
"instruction": "Wipe the window with the sponge. Then, put the sponge on the table."}
- Output:
```
{"task_cohesion": {
    "task_sequence": [
        "move_hand()",
        "grasp_object()",
        "detach_from_plane()",
        "move_object()",
        "attach_to_plane()",
        "wipe_on_plane()",
        "detach_from_plane()",
        "move_object()",
        "attach_to_plane()",
        "release_object()"
    ],
    "step_instructions": [
        "move the hand near the sponge",
        "grasp the sponge",
        "pick up the sponge",
        "bring the sponge above the window",
        "attach the sponge to the window",
        "wipe the window with the sponge",
        "detach the sponge from the window",
        "bring the sponge above the table",
        "put down the sponge",
        "release the sponge"
    ],
    "object_name": "<sponge>"},
"environment_before": {"assets":["<table>", "<window>"],
    "asset_states": {"<table>": "next_to(<window>)"},
    "objects": ["<sponge>"],
    "object_states": {"<sponge>": "on_something(<table>)"},}
"environment_after": {"assets":["<table>", "<window>"],
    "asset_states": {"<table>": "next_to(<window>)"},
    "objects": ["<sponge>"],
    "object_states": {"<sponge>": "on_something(<table>)"}},
"instruction_summary": "wipe the window with the sponge, then put the sponge on the table",
"question":""}
```
"""
From these examples, learn that some robotic actions have dependencies with the actions before and after them.

Now, the instruction is: Put the juice on top of the shelf